{"version":3,"sources":["components/SearchBar/SearchBar.tsx","components/ImageGalleryItem/ImageGalleryItem.tsx","components/ImageGallery/ImageGallery.tsx","components/Button/Button.tsx","components/Modal/Modal.tsx","components/Container/Container.tsx","services/apiService.ts","App.tsx","index.tsx"],"names":["SearchBar","onSubmit","useState","query","setQuery","className","e","preventDefault","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","ImageGalleryItem","webformatURL","largeImageURL","tags","onClick","updateData","largeImage","src","alt","ImageGallery","images","map","id","Button","modalRoot","document","querySelector","Modal","onClose","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","target","Container","children","axios","defaults","baseURL","API_KEY","App","searchQuery","setSearchQuery","currentPage","setCurrentPage","setImages","setLargeImage","isOpen","setIsOpen","isLoading","setIsLoading","fetchData","get","then","response","data","fetchImages","prev","hits","finally","toggleModal","scrollToBottom","animateScroll","containerId","color","height","width","timeout","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1af9ed34.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\ninterface Props {\r\n  onSubmit: (evt: string) => void;\r\n}\r\n\r\nexport default function SearchBar({ onSubmit }: Props) {\r\n  const [query, setQuery] = useState('');\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(e.currentTarget.value);\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    onSubmit(query);\r\n    setQuery('');\r\n  };\r\n\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n          value={query}\r\n          onChange={handleChange}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\n\r\ninterface Props {\r\n  webformatURL: string;\r\n  largeImageURL: string;\r\n  tags: string;\r\n  onClick: () => void;\r\n  updateData: (imageUrl: string) => void;\r\n}\r\n\r\nexport default function ImageGalleryItem({\r\n  webformatURL,\r\n  largeImageURL,\r\n  tags,\r\n  onClick,\r\n  updateData,\r\n}: Props) {\r\n  const [largeImage, setLargeImage] = useState(largeImageURL);\r\n\r\n  return (\r\n    <li\r\n      className=\"ImageGalleryItem\"\r\n      onClick={() => {\r\n        onClick();\r\n        updateData(largeImage);\r\n      }}\r\n    >\r\n      <img src={webformatURL} alt={tags} className=\"ImageGalleryItem-image\" />\r\n    </li>\r\n  );\r\n}\r\n\r\n// class ImageGalleryItem extends Component {\r\n//   state = {\r\n//     largeImage: this.props.largeImageURL,\r\n//   };\r\n\r\n//   render() {\r\n//     const { webformatURL, tags, onClick, updateData } = this.props;\r\n//     const { largeImage } = this.state;\r\n\r\n//   }\r\n// }\r\n","import ImageGalleryItem from '../ImageGalleryItem';\r\nimport IImage from '../../interfaces/App.interfaces';\r\n\r\ninterface Props {\r\n  images: IImage[];\r\n  onClick: () => void;\r\n  updateData: (data: string) => void;\r\n}\r\n\r\nexport default function ImageGallery({ images, onClick, updateData }: Props) {\r\n  return (\r\n    <ul className=\"ImageGallery\">\r\n      {images.map(({ webformatURL, tags, id, largeImageURL }) => (\r\n        <ImageGalleryItem\r\n          key={id}\r\n          webformatURL={webformatURL}\r\n          tags={tags}\r\n          onClick={onClick}\r\n          updateData={updateData}\r\n          largeImageURL={largeImageURL}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","interface Props {\r\n  onClick: () => void;\r\n  id?: string;\r\n}\r\n\r\nexport default function Button({ onClick, id }: Props) {\r\n  return (\r\n    <button className=\"Button\" type=\"button\" onClick={onClick}>\r\n      Load more\r\n    </button>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\ninterface Props {\r\n  onClose: () => void;\r\n  largeImage: string;\r\n}\r\n\r\nconst modalRoot = document.querySelector('#modal-root') as HTMLElement;\r\n\r\nexport default function Modal({ onClose, largeImage }: Props) {\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  });\r\n\r\n  const handleBackdropClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (e.target === e.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e: KeyboardEvent) => {\r\n    if (e.code === 'Escape') {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <div className=\"Overlay\" onClick={handleBackdropClick}>\r\n      <div className=\"Modal\">\r\n        <img src={largeImage} alt=\"\" />\r\n      </div>\r\n    </div>,\r\n    modalRoot,\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport default function Container({ children }: Props) {\r\n  return <div className=\"Container\">{children}</div>;\r\n}\r\n","import axios from 'axios';\r\nimport IImage from '../interfaces/App.interfaces';\r\n\r\ninterface FetchedData {\r\n  hits: IImage[];\r\n  total: number;\r\n  totalHits: number;\r\n}\r\n\r\naxios.defaults.baseURL = 'https://pixabay.com';\r\nconst API_KEY = '21175244-7c66133e2371767f9955ec31b';\r\n\r\nexport default function fetchImages(searchQuery: string, currentPage = 1) {\r\n  return axios\r\n    .get<FetchedData>(\r\n      `/api/?q=${searchQuery}&page=${currentPage}&image_type=photo&orientation=horizontal&per_page=15&key=${API_KEY}`,\r\n    )\r\n    .then(response => response.data);\r\n}\r\n","import { useState, useEffect } from 'react';\nimport { animateScroll } from 'react-scroll';\nimport Loader from 'react-loader-spinner';\nimport SearchBar from './components/SearchBar';\nimport ImageGallery from './components/ImageGallery';\nimport Button from './components/Button';\nimport Modal from './components/Modal';\nimport Container from './components/Container';\nimport fetchImages from './services/apiService';\nimport IImage from './interfaces/App.interfaces';\n\nexport default function App() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [images, setImages] = useState<IImage[]>([]);\n  const [largeImage, setLargeImage] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      return;\n    }\n    fetchData();\n  }, [searchQuery]);\n\n  const onChangeQuery = (query: string) => {\n    setSearchQuery(query);\n    setCurrentPage(1);\n    setImages([]);\n  };\n\n  const fetchData = () => {\n    setIsLoading(true);\n    fetchImages(searchQuery, currentPage)\n      .then(response => {\n        setImages(prev => [...prev, ...response.hits]);\n        setCurrentPage(prev => (prev += 1));\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleClick = () => {\n    fetchData();\n    scrollToBottom();\n  };\n\n  const toggleModal = () => {\n    setIsOpen(prev => !prev);\n  };\n\n  const updateData = (largeImage: string) => {\n    setLargeImage(largeImage);\n  };\n\n  const scrollToBottom = () => {\n    animateScroll.scrollToBottom({\n      containerId: 'endView',\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <SearchBar onSubmit={onChangeQuery} />\n      <ImageGallery\n        images={images}\n        onClick={toggleModal}\n        updateData={updateData}\n      />\n      <Container>\n        {isLoading && (\n          <Loader\n            type=\"ThreeDots\"\n            color=\"#3f51b5\"\n            height={100}\n            width={100}\n            timeout={3000}\n          />\n        )}\n      </Container>\n      {images.length > 0 && <Button onClick={handleClick} id=\"endView\" />}\n\n      {isOpen && <Modal onClose={toggleModal} largeImage={largeImage} />}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}